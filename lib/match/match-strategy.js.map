{"version":3,"sources":["../../src/match/match-strategy.js"],"names":["MatchStrategy","characteristics","_characteristics","kind","Kinds","SINGLES","scoring","Scoring","TWOSETS","match","addPlayers","playerCount","doubles","singles","opponent","opponents","first","i","player","players","list","add","id","second","CommandStrategy","DOUBLES","matchStrategy","_match","_matchStrategy","_matchCommandStrategy","undefined","_servingStrategy","forEach","value","dispose","matchCommandStrategy","commands","setGameCommandStrategy","matchSetCommandStrategy","lastSet","sets","last","inProgress","activeSet","lastGame","games","ServingStrategy","servers","MatchCommandStrategy","_setGameCommandStrategy","game","activeGame","GameCommandStrategy","_matchSetCommandStrategy","matchSet","SetCommandStrategy","servingStrategy","_opponents","_opponentPlayerCount","length","_servers","containsValue","hasPlayerServed","removeLast","areServersKnown","Error","lastServerId","nextServer","_addOtherServers","opponentOfPlayer","count","opponentPlayerCount","nextOpponent","hasOpponentServed","next","commandStrategy","_commandStrategy","_onWinner","entity","onWinner","subscribeWinner","unSubscribeWinner","contains","updateScore","warmingUp","started","winnerId","scores","clear","server","startGame","removeList","result","matchTiebreak","set","updateWinner","winningScore","max","Math","winThreshold","indexOf","serverChoices","canStartSet","canStartMatchTiebreak","finished","_matchSet","addServer","removeLastServer","setTiebreak","min","canStartGame","canStartSetTiebreak","matchSetStrategy","_game","_matchSetStrategy","opponentId","winner"],"mappings":"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","file":"match-strategy.js","sourcesContent":["import {\n    StartWarmup, StartPlay, StartSet,\n    StartSetTiebreak, WinSetTiebreak,\n    StartMatchTiebreak, WinMatchTiebreak,\n    StartGame, WinGame, StartOver\n} from './match-command';\nimport {matchObservable} from './match-observable';\n\nimport {MatchCharacteristics} from './match-characteristics'\n\nimport {Match, MatchSet, SetGame} from './match-entity'\n\n\n// TODO: Class names are confusing.  Rename.\nclass MatchStrategy {\n\n    constructor(characteristics) {\n        this._characteristics = characteristics || {};\n        this.characteristics.kind = this.characteristics.kind || MatchCharacteristics.Kinds.SINGLES;\n        this.characteristics.scoring = this.characteristics.scoring || MatchCharacteristics.Scoring.TWOSETS;\n    }\n\n    get characteristics() {\n        return this._characteristics;\n    }\n\n    // TODO: Move to a strategy\n    createMatch() {\n        let match = new Match();\n        this.addPlayers(match);\n        return match;\n\n    }\n\n    get singles() {\n        return (this.characteristics.kind === MatchCharacteristics.Kinds.SINGLES);\n    }\n\n    get doubles() {\n        return (this.characteristics.kind === MatchCharacteristics.Kinds.DOUBLES);\n    }\n\n    addPlayers(match) {\n        let playerCount = 0;\n        if (this.doubles) {\n            playerCount = 4;\n        }\n\n        if (this.singles) {\n            playerCount = 2;\n        }\n\n        let opponent = match.opponents.first;\n        for (let i = 1; i <= playerCount; i++) {\n            let player = match.players.list.add();\n            opponent.players.add().id = player.id;\n            if (i === playerCount / 2) {\n                opponent = match.opponents.second;\n            }\n        }\n    }\n\n    createCommandStrategy(match) {\n        return new CommandStrategy(match, this);\n    }\n\n}\n\nclass CommandStrategy {\n\n    constructor(match, matchStrategy) {\n        this._match = match;\n        this._matchStrategy = matchStrategy;\n        this._matchCommandStrategy = undefined;\n        this._matchCommandStrategy = undefined;\n        this._matchCommandStrategy = undefined;\n        this._servingStrategy = undefined;\n    }\n\n    dispose() {\n        [this._matchCommandStrategy, this._matchCommandStrategy, this._matchCommandStrategy, this._servingStrategy].forEach((value)=> {\n            if (value) {\n                value.dispose();\n            }\n        });\n    }\n\n    get characteristics() {\n        return this.matchStrategy.characteristics;\n    }\n\n    get match() {\n        return this._match;\n    }\n\n    get singles() {\n        return this.matchStrategy.singles;\n    }\n\n    get doubles() {\n        return this.matchStrategy.doubles;\n    }\n\n    get matchStrategy() {\n        return this._matchStrategy;\n    }\n\n    get activeSet() {\n        return this.matchCommandStrategy.activeSet;\n    }\n\n    get activeGame() {\n        return this.matchSetCommandStrategy.activeGame;\n    }\n\n    get servingStrategy() {\n        if (!this._servingStrategy) {\n            this._servingStrategy = new ServingStrategy(this.characteristics, this.match.opponents,\n                this.match.servers);\n        }\n        return this._servingStrategy;\n    }\n\n    get matchCommandStrategy() {\n        if (!this._matchCommandStrategy) {\n            this._matchCommandStrategy = new MatchCommandStrategy(this);\n        }\n        return this._matchCommandStrategy;\n    }\n\n    get setGameCommandStrategy() {\n        if (!this._setGameCommandStrategy || this._setGameCommandStrategy.game != this.activeGame) {\n            if (this._setGameCommandStrategy) this._setGameCommandStrategy.dispose();\n            this._setGameCommandStrategy = new GameCommandStrategy(this.activeGame, this.match.opponents, this.matchSetCommandStrategy);\n        }\n        return this._setGameCommandStrategy;\n    }\n\n    get matchSetCommandStrategy() {\n        if (!this._matchSetCommandStrategy || this._matchSetCommandStrategy.matchSet != this.activeSet) {\n            if (this._matchSetCommandStrategy) this._matchSetCommandStrategy.dispose();\n            this._matchSetCommandStrategy = new SetCommandStrategy(this.activeSet, this.servingStrategy, this.matchCommandStrategy);\n        }\n        return this._matchSetCommandStrategy;\n    }\n\n    matchCommands() {\n        return this.matchCommandStrategy.commands();\n    }\n\n    setGameCommands() {\n        return this.setGameCommandStrategy.commands();\n    }\n\n    matchSetCommands() {\n        return this.matchSetCommandStrategy.commands();\n    }\n\n    get activeGame() {\n        let activeSet = this.activeSet;\n        if (activeSet) {\n            let lastGame = activeSet.games.last;\n            if (lastGame && lastGame.inProgress) {\n                return lastGame;\n            }\n        }\n    }\n\n    get activeSet() {\n        let lastSet = this.match.sets.last;\n        if (lastSet && lastSet.inProgress) {\n            return lastSet;\n        }\n    }\n}\n\nclass ServingStrategy {\n\n    constructor(characteristics, opponents, servers) {\n        this._characteristics = characteristics;\n        this._opponents = opponents;\n        this._opponentPlayerCount = [...this.opponents.first.players].length + [...this.opponents.second.players].length;\n        this._servers = servers;\n    }\n\n    dispose() {\n\n    }\n\n    get characteristics() {\n        return this._characteristics;\n    }\n\n    get opponents() {\n        return this._opponents;\n    }\n\n    get servers() {\n        return this._servers;\n    }\n\n    get opponentPlayerCount() {\n        return this._opponentPlayerCount;\n    }\n\n    get areServersKnown() {\n        return this.servers.players.count >= this.opponentPlayerCount / 2;\n    }\n\n    // get match() {\n    //     return this._commandStrategy.match;\n    // }\n\n    get lastServerId() {\n        return this.servers.value.lastServerId;\n\n    }\n\n    set lastServerId(id) {\n        this.servers.value.lastServerId = id;\n    }\n\n    hasPlayerServed(player) {\n        return this.servers.players.containsValue({id: player.id});\n    }\n\n    hasOpponentServed(opponent) {\n        for (let player of opponent.players) {\n            if (this.hasPlayerServed(player)) {\n                return true;\n            }\n        }\n    }\n\n    removeLastServer() {\n        this.servers.players.removeLast();\n    }\n\n    addServer(player) {\n        if (!player) {\n            if (!this.areServersKnown) {\n                throw new Error('player must be specified');\n            }\n            this.lastServerId = this.nextServer.id;\n        }\n        else if (!this.areServersKnown) {\n            if (this.hasPlayerServed(player)) {\n                throw new Error('player serving out of order')\n            }\n            this.servers.players.add().id = player.id;\n            this.lastServerId = player.id;\n            this._addOtherServers(player);\n        }\n    }\n\n    _addOtherServers(player) {\n        if (this.areServersKnown) {\n            let opponent = this.opponentOfPlayer(player);\n            while (this.servers.players.count < this.opponentPlayerCount) {\n                opponent = this.nextOpponent(opponent);\n                //[...opponent.players].filter((player)=>return !this.hasPlayerServed(player)).forEach()\n                for (let player of opponent.players) {\n                    if (!this.hasPlayerServed(player))\n                        this.servers.players.add().id = player.id\n                }\n            }\n        }\n    }\n\n    opponentOfPlayer(player) {\n        for (let opponent of this.opponents) {\n            if (opponent.players.containsValue({id: player.id})) {\n                return opponent;\n            }\n        }\n    }\n\n    nextOpponent(opponent) {\n        return (opponent === this.opponents.first) ? this.opponents.second : this.opponents.first;\n    }\n\n    * serverChoices() {\n        if (!this.areServersKnown) {\n            for (let opponent of this.opponents) {\n                if (!this.hasOpponentServed(opponent)) {\n                    yield* opponent.players;\n                }\n            }\n        }\n    }\n\n    get nextServer() {\n        if (!this.areServersKnown) {\n            throw new Error('next server not known');\n        }\n        let next;\n        let players = [...this.servers.players];\n        let last = this.lastServerId;\n        if (!last)\n            return players[0];\n        for (let i = 0; i < players.length; i++) {\n            if (players[i].id === last) {\n                next = i + 1;\n                break;\n            }\n        }\n        if (next)\n            return players[next % players.length];\n\n\n    }\n}\n\n\nclass MatchCommandStrategy {\n\n    constructor(commandStrategy) {\n        this._commandStrategy = commandStrategy;\n        this._onWinner = (entity) => this.onWinner(entity);\n        matchObservable.subscribeWinner(this._onWinner);\n    }\n\n    dispose() {\n        matchObservable.unSubscribeWinner(this._onWinner);\n    }\n\n    onWinner(entity) {\n        if (this.match.sets.contains(entity))\n            this.updateScore();\n    }\n\n    get match() {\n        return this._commandStrategy.match;\n    }\n\n    get characteristics() {\n        return this._commandStrategy.characteristics;\n    }\n\n    get commandStrategy() {\n        return this._commandStrategy;\n    }\n\n    canStartOver() {\n        return (this.match.warmingUp || this.match.started);\n    }\n\n    startOver() {\n        this.match.winnerId = undefined;\n        this.match.warmingUp = undefined;\n        this.match.scores = [0, 0];\n        this.match.servers.clear();\n        this.match.sets.clear();\n        // TODO: Clear command history\n    }\n\n    startWarmup() {\n        this.match.warmingUp = true;\n    }\n\n    undoStartWarmup() {\n        this.match.warmingUp = undefined;\n    }\n\n    startPlay(server) {\n        new MatchSet(this.match.sets, {});\n        return this.commandStrategy.matchSetCommandStrategy.startGame(server);\n    }\n\n    undoStartPlay(server) {\n        this.match.sets.removeLast();\n    }\n\n    startSet() {\n        new MatchSet(this.match.sets);\n        return this.commandStrategy.matchSetCommandStrategy.startGame();\n    }\n\n    undoStartSet() {\n        this.match.sets.removeList();\n    }\n\n    startMatchTiebreak() {\n        new MatchSet(this.match.sets);\n        // TODO: Match set strategy should be tiebreak specific\n        let result = this.commandStrategy.matchSetCommandStrategy.startGame();\n        result.matchTiebreak = true;\n    }\n\n    undoStartMatchTiebreak() {\n        this.match.sets.removeList();\n    }\n\n    updateScore() {\n        let scores = [0, 0];\n\n        for (let set of this.match.sets) {\n            if (set.winnerId) {\n                scores[set.winnerId - 1] += 1;\n            }\n        }\n\n        this.match.scores = scores;\n\n        this.updateWinner(scores);\n    }\n\n    get winThreshold() {\n        return 2;\n    }\n\n    get canStartSet() {\n        return this.match.inProgress && !this.canStartMatchTiebreak && this.match.sets.last.finished;\n    }\n\n    get canStartMatchTiebreak() {\n        return this.match.inProgress && this.match.scores && !this.match.sets.last.inProgress &&\n            this.match.scores[0] === 1 && this.match.scores[1] === 1;\n    }\n\n    updateWinner(scores) {\n        let winningScore;\n        let max = Math.max(...scores);\n        if (max === this.winThreshold) {\n            winningScore = max; // tiebreak\n        }\n        if (winningScore) {\n            this.match.winnerId = scores.indexOf(winningScore) + 1;\n        }\n    }\n\n    * commands() {\n        if (!this.match.warmingUp && !this.match.started) {\n            yield new StartWarmup(this);\n        }\n        if (!this.match.started) {\n            for (let server of this.commandStrategy.servingStrategy.serverChoices()) {\n                yield new StartPlay(this, server.id);\n            }\n        }\n        if (this.canStartSet) {\n            yield new StartSet(this);\n        } else if (this.canStartMatchTiebreak) {\n            yield new StartMatchTiebreak(this);\n        }\n     }\n}\n\nclass SetCommandStrategy {\n\n    constructor(matchSet, servingStrategy, matchCommandStrategy) {\n        this._matchSet = matchSet;\n        this._servingStrategy = servingStrategy;\n        this._matchCommandStrategy = matchCommandStrategy;\n        this._onWinner = (entity) => this.onWinner(entity);\n        if (this._matchSet)\n            matchObservable.subscribeWinner(this._onWinner);\n    }\n\n    dispose() {\n        matchObservable.unSubscribeWinner(this._onWinner);\n    }\n\n    get matchSet() {\n        return this._matchSet;\n    }\n\n    onWinner(entity) {\n        if (this.matchSet.games.contains(entity))\n            this.updateScore(entity);\n    }\n\n    get matchCommandStrategy() {\n        return this._matchCommandStrategy;\n    }\n\n    startGame(server) {\n        const result = new SetGame(this.matchSet.games);\n        this.servingStrategy.addServer(server);\n        return result;\n    }\n\n    undoStartGame(server) {\n        this.matchSet.removeLast();\n        this.servingStrategy.removeLastServer();\n    }\n\n    startSetTiebreak() {\n        const result = new SetGame(this.matchSet.games);\n        result.setTiebreak = true;\n        return result;\n    }\n\n    undoStartSetTiebreak() {\n        this.matchSet.removeLast();\n    }\n\n    get winThreshold() {\n        return 6;\n    }\n\n    updateScore(game) {\n        let scores = [0, 0];\n\n        for (let game of this.matchSet.games) {\n            if (game.winnerId) {\n                scores[game.winnerId - 1] += 1;\n            }\n        }\n\n        this.matchSet.scores = scores;\n\n        this.updateWinner(game, scores);\n    }\n\n    updateWinner(game, scores) {\n        let winningScore;\n        let max = Math.max(...scores);\n        let min = Math.min(...scores);\n        if (game.matchTiebreak && max == 1) {\n            winningScore = max\n        } else {\n            if (max === this.winThreshold + 1 && min === this.winThreshold) {\n                winningScore = max; // tiebreak\n            } else if (max >= this.winThreshold && max - min >= 2) {\n                winningScore = max;\n            }\n        }\n\n        if (winningScore) {\n            this.matchSet.winnerId = scores.indexOf(winningScore) + 1;\n        }\n\n    }\n\n    get matchSet() {\n        return this._matchSet;\n    }\n\n    get servingStrategy() {\n        return this._servingStrategy;\n    }\n\n    get canStartGame() {\n        return (this.matchSet && !this.matchSet.finished && !this.canStartSetTiebreak &&\n        this.matchSet.games.last.finished);\n    }\n\n    get canStartSetTiebreak() {\n        return (this.matchSet &&\n        this.matchSet.games.last.finished && this.matchSet.scores[0] === 6 && this.matchSet.scores[1] === 6);\n    }\n\n    * commands() {\n        if (this.canStartGame) {\n            if (!this.servingStrategy.areServersKnown) {\n                for (let player of this.servingStrategy.serverChoices()) {\n                    yield new StartGame(this, player.id);\n                }\n            } else {\n                yield new StartGame(this);\n            }\n        } else if (this.canStartSetTiebreak) {\n            yield new StartSetTiebreak(this);\n        }\n    }\n}\n\nclass GameCommandStrategy {\n\n    constructor(game, opponents, matchSetStrategy) {\n        this._game = game;\n        this._opponents = opponents;\n        this._matchSetStrategy = matchSetStrategy;\n    }\n\n    dispose() {\n\n    }\n\n    get matchSetStrategy() {\n        return this._matchSetStrategy;\n    }\n\n    winGame(opponentId) {\n        this._game.winnerId = opponentId;\n    }\n\n    undoWinGame(opponentId) {\n        this._game.winnerId = undefined;\n    }\n\n    get opponents() {\n        return this._opponents;\n    }\n\n    get game() {\n        return this._game;\n    }\n\n    * commands() {\n        if (this.game && !this.game.winner) {\n            for (let opponent of this.opponents) {\n                if (this.game.setTiebreak)\n                    yield new WinSetTiebreak(this, opponent.id);\n                else if (this.game.matchTiebreak)\n                    yield new WinMatchTiebreak(this, opponent.id);\n                else\n                    yield new WinGame(this, opponent.id);\n            }\n        }\n    }\n}\n\nexport {MatchStrategy}"]}