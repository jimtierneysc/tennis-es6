{"version":3,"sources":["../../src/match/match.js"],"names":["ScoreComponent","owner","value","_childList","undefined","_owner","_value","addChild","member","defValue","initValue","component","childRemoved","childAdded","ScoreComponentList","constructChildren","forEach","i","factory","indexOf","splice","push","item","last","removeChild","arg","result","length","len","Game","Games","Set","_games","initArray","Sets","Player","id","_nextId","name","PlayersList","Players","lastId","_list","PlayerRef","playerId","PlayerRefs","Server","Servers","Opponent","Opponents","_first","_second","Match","_sets","_players","_servers","_opponents","_warmingUp","started","warmingUp","sets","kind","Kinds","SINGLES","count","DOUBLES"],"mappings":"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","file":"match.js","sourcesContent":["/**\n * Classes to record tennis match score\n */\n\n// TODO: Parent vs. Owner\nclass ScoreComponent {\n  constructor(owner, value) {\n    this._childList = undefined;\n    this._owner = owner;\n    this._value = value || {};\n    if (owner) {\n      this._owner.addChild(this);\n    }\n  }\n\n  initValue(member, defValue) {\n    if (!(member in this.value)) {\n      this.value[member] = defValue;\n    }\n    return this.value[member];\n  }\n\n  initArray(member) {\n    return this.initValue(member, []);\n  }\n\n  initObj(member) {\n    return this.initValue(member, {});\n  }\n\n  get owner() {\n    return this._owner;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  childRemoved(component) { // virtual\n\n  }\n\n  childAdded(component) {\n\n  }\n\n  removeChild(component) {\n    this.childRemoved(component);\n  }\n\n  // TODO: Set owner, remove from previous owner\n  addChild(component) {\n    this.childAdded(component);\n  }\n}\n\nclass ScoreComponentList extends ScoreComponent {\n  constructor(owner, value) {\n    super(owner, value || []);\n    this._childList = [];\n    this.constructChildren();\n  }\n\n  constructChildren() {\n    this.value.forEach((i) => this.factory(i));\n  }\n\n  removeChild(component) {\n    const i = this._childList.indexOf(component);\n    if (i >= 0) {\n      this._childList.splice(i, 1);\n      this.childRemoved(component);\n    }\n  }\n\n  // TODO: Set owner, remove from previous owner\n  addChild(component) {\n    this._childList.push(component);\n    this.childAdded(component);\n  }\n\n  childRemoved(component) {\n    const i = this.value.indexOf(component.value);\n    if (i >= 0) {\n      this.value.splice(i, 1);\n    }\n  }\n\n  // Override\n  childAdded(component) {\n    const i = this.value.indexOf(component.value);\n    if (i < 0) {\n      this.value.push(component.value);\n    }\n  }\n\n  get count() {\n    return this._childList.length;\n  }\n\n  get last() {\n    const len = this._childList.length;\n    return len > 0 ? this._childList[len - 1] : null;\n  }\n\n  removeLast() {\n    const item = this.last;\n    if (item) {\n      this.removeChild(item);\n    }\n  }\n\n  * [Symbol.iterator]() {\n    for (const arg of this._childList) {\n      yield arg;\n    }\n  }\n\n  add() {\n    const result = this.factory();\n    return result;\n  }\n\n  factory(value) {\n    // TODO: Raise exception\n    return null;\n  }\n}\n\nclass Game extends ScoreComponent {\n}\n\nclass Games extends ScoreComponentList {\n  factory(value) {\n    return new Game(this, value);\n  }\n}\n\nclass Set extends ScoreComponent {\n  constructor(owner, value) {\n    super(owner, value);\n    this._games = new Games(this, this.initArray('games'));\n  }\n\n  get games() {\n    return this._games;\n  }\n}\n\nclass Sets extends ScoreComponentList {\n  factory(value) {\n    return new Set(this, value);\n  }\n\n}\n\nclass Player extends ScoreComponent {\n\n  constructor(owner, value) {\n    super(owner, value || {id: owner.owner._nextId()});\n  }\n\n  get name() {\n    return this.value.name || \"\";\n  }\n\n  set name(value) {\n    this.value.name = value;\n  }\n\n  get id() {\n    return this.value.id;\n  }\n}\n\nclass PlayersList extends ScoreComponentList {\n  factory(value) {\n    return new Player(this, value);\n  }\n\n}\n\nclass Players extends ScoreComponent {\n  constructor(owner, value) {\n    super(owner, value || {lastId: 0});\n    this._list = new PlayersList(this, this.initArray('list'));\n  }\n\n  get list() {\n    return this._list;\n  }\n\n  _nextId() {\n    this.value.lastId = 'lastId' in this.value ? this.value.lastId + 1 : 1;\n    return this.value.lastId;\n  }\n}\n\nclass PlayerRef extends ScoreComponent {\n\n  get playerId() {\n    return this.value.playerId;\n  }\n\n  set playerId(value) {\n    this.value.playerId = value;\n  }\n}\n\nclass PlayerRefs extends ScoreComponentList {\n  factory(value) {\n    return new PlayerRef(this, value);\n  }\n}\n\nclass Server extends PlayerRef {\n\n}\n\nclass Servers extends PlayerRefs {\n  factory(value) {\n    return new Server(this, value);\n  }\n}\n\nclass Opponent extends PlayerRefs {\n\n}\n\nclass Opponents extends ScoreComponent {\n  constructor(owner, value) {\n    super(owner, value || {});\n    this._first = new Opponent(this, this.initArray('first'));\n    this._second = new Opponent(this, this.initArray('second'));\n  }\n\n  get first() {\n    return this._first;\n  }\n\n  get second() {\n    return this._second;\n  }\n}\n\nclass Match extends ScoreComponent {\n\n  static Kinds = {\n    SINGLES: 'SINGLES',\n    DOUBLES: 'DOUBLES',\n  };\n\n  constructor(value) {\n    super(undefined, value);\n    this._sets = new Sets(this, this.initArray('sets'));\n    this._players = new Players(this, this.initArray('players'));\n    this._servers = new Servers(this, this.initArray('servers'));\n    this._opponents = new Opponents(this, this.initArray('opponents'));\n    this._warmingUp = false;\n  }\n\n  set kind(value) {\n    this.value.kind = value;\n  }\n\n  get kind() {\n    return this.value.kind || Match.Kinds.SINGLES;\n  }\n\n  start() {\n    if (!this.started) {\n      this.warmingUp = false;\n      new Set(this.sets, {});\n    }\n  }\n\n  get started() {\n    return this.sets.count > 0;\n  }\n\n  get warmingUp() {\n    return _warmingUp;\n  }\n\n  set warmingUp(value) {\n    _warmingUp = value;\n  }\n\n  get sets() {\n    return this._sets;\n  }\n\n  get players() {\n    return this._players;\n  }\n\n  get servers() {\n    return this._servers;\n  }\n\n  get opponents() {\n    return this._opponents;\n  }\n}\n\nexport { Match, Set, Game }\n"]}