{"version":3,"sources":["../../../src/examples/inquiry/app.js"],"names":["PlayMatch","match","subscribeScores","entity","console","log","constructor","name","scores","subscribeWinner","winnerId","map","showMainMenu","done","questions","type","message","choices","clear","set","commands","Array","prototype","concat","setGameCommands","matchSetCommands","matchCommands","otherCommands","c","title","commandInvoker","invoke","keys","forEach","value","push","_play","updateQuestions","prompt","then","answers","fn","get","command","makeMatch","playMatch","startPlay"],"mappings":"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","file":"app.js","sourcesContent":["'use strict';\nimport inquirer from 'inquirer';\nimport {matchFactory} from '../../match/match-factory';\nimport {matchObservable} from '../../match/match-observable';\n\nclass PlayMatch {\n\n    constructor(match) {\n        this.match = match;\n        matchObservable.subscribeScores((entity)=> {\n            console.log(`${entity.constructor.name} score: ${JSON.stringify(entity.scores)}`)\n\n        });\n        matchObservable.subscribeWinner((entity)=> {\n            console.log(`${entity.constructor.name} winner: ${JSON.stringify(entity.winnerId)}`)\n       });\n        this.map = new Map();\n        this.showMainMenu = true;\n        this.done = false;\n        this.questions = {\n            type: 'list',\n            name: 'command',\n            message: 'What do you want to do?',\n            choices: ['a', 'b']\n        };\n\n\n    }\n\n    updateQuestions() {\n        this.questions.choices = [];\n        this.map.clear();\n        if (this.showMainMenu) {\n            this.map.set('play', () => this.showMainMenu = false);\n            this.map.set('quit', () => this.done = true);\n        } else {\n            let commands = Array.prototype.concat(\n                [...this.match.setGameCommands()],\n                [...this.match.matchSetCommands()],\n                [...this.match.matchCommands()],\n                [...this.match.otherCommands()]);\n            for (let c of commands) {\n                // this.questions.choices.push(c.title);\n                this.map.set(c.title, () => this.match.commandInvoker.invoke(c));\n            }\n            this.map.set('menu', () => this.showMainMenu = true);\n        }\n\n        [...this.map.keys()].forEach((value) => this.questions.choices.push(value));\n\n    }\n\n    startPlay() {\n        this.done = false;\n        this.showMainMenu = true;\n        this._play();\n    }\n\n    _play() {\n        this.updateQuestions();\n        inquirer.prompt(this.questions).then((answers) => {\n            // console.log(answers);\n            let fn = this.map.get(answers.command);\n            fn();\n            if (!this.done) {\n                this._play();\n            }\n        })\n\n    }\n}\n\n// function play() {\n//     inquirer.prompt(questions).then(function (answers) {\n//         output.push(answers.tvShow);\n//         if (answers.askAgain) {\n//             ask();\n//         } else {\n//             console.log('Your favorite TV Shows:', output.join(', '));\n//         }\n//     });\n// }\n\nlet match = matchFactory.makeMatch();\nlet playMatch = new PlayMatch(match);\nplayMatch.startPlay();\n"]}